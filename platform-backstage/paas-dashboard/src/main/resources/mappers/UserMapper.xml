<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
       <!-- id和result都映射一个单独列的值到简单数据类型
        这两者之间的唯一不同是id表示的结果将是当比较对象实例时用到的标识属性。
        这帮助来改进整体表现，特别是缓存和嵌入结果映射（也就是联合映射）。-->
<mapper namespace="cn.dceast.platform.paas.repository.UserMapper">
    <resultMap id="BaseResultMap" type="cn.dceast.platform.paas.model.User">
        <id column="user_Id" property="userId" jdbcType="VARCHAR"/>
        <result column="user_Name" property="userName" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
    </resultMap>
    <sql id="Base_Column_List">
      user_Id, user_Name, password
    </sql>
    <!--
        ===================================================================
        通用Mapper会自动生成一些sql，如：id为insert的由通用Mapper自动生成
        ===================================================================
    -->

    <!-- 查询全部 -->
    <select id="selectAll" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List"/>
        from user
    </select>
    <!-- 根据条件查询 -->
    <!--
        默认情况下,使用#{}语法,MyBatis会产生PreparedStatement语句中，并且安全的设置PreparedStatement参数，这个过程中MyBatis会进行必要的安全检查和转义。
        示例1：
        执行SQL：Select * from emp where name = #{employeeName}
        参数：employeeName=>Smith
        解析后执行的SQL：Select * from emp where name = ？
        执行SQL：Select * from emp where name = ${employeeName}
        参数：employeeName传入值为：Smith
        解析后执行的SQL：Select * from emp where name =Smith
        综上所述、${}方式会引发SQL注入的问题、同时也会影响SQL语句的预编译，所以从安全性和性能的角度出发，能使用#{}的情况下就不要使用${}
        但是${}在什么情况下使用呢？
        有时候可能需要直接插入一个不做任何修改的字符串到SQL语句中。这时候应该使用${}语法（我猜测是性能会高）
        比如，动态SQL中的字段名，如：ORDER BY ${columnName}
        注意：当使用${}参数作为字段名或表名时、需指定statementType为“STATEMENT”
    -->
    <select id="selectBy" parameterType="Map" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
            from user
        <where>
           <!-- <if test="userName != null and userName != '' ">
              userName = #{userName,jdbcType=VARCHAR}
            </if>
            <if test="password != null and password != '' ">
               AND password = #{password,jdbcType=VARCHAR}
            </if>-->
        </where>
            <!--排序方式 -->
            <if test="orderBy != null and orderBy != '' ">
                order by ${orderBy}
            </if>
    </select>

    <select id="selectUserByName" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from user
        where user_Name = #{userName,jdbcType=VARCHAR}
    </select>

</mapper>